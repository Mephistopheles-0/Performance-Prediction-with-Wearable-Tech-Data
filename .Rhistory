library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
required_libraries <- c("data.table", "caret", "ggplot2", "parallel","doParallel",
"visdat", "purrr", "dplyr", "printr","corrplot",
"kableExtra", "gbm", "e1071", "randomForest","forecast")
library_check <- sapply(required_libraries, require, character.only = TRUE,
quietly = TRUE)
if (!file.exists("./data")) {
dir.create("./data")
}
# subset the datasets
trainData <- trainData[, -c(1:7)]
download.file(trainURL, file.path(path, "pml-training.csv"))
setwd("./data")
path <- getwd()
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainURL, file.path(path, "pml-training.csv"))
download.file(testURL, file.path(path, "pml-testing.csv"))
setwd("./..")
trainData <- read.csv("./data/pml-training.csv")
trainData <- read.csv("./data/pml-training.csv")
testData <- read.csv("./data/pml-testing.csv")
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
# dimensions of the data
rbind(training = dim(trainData),
testing = dim(testData))
# function to remove columns with NAs
na_remove_col <- function(dataset, threshold) {
dataset %>%
discard(~ sum(is.na(.x)) / length(.x) * 100 > threshold)
}
training <- na_remove_col(trainData, 70)
testing <- na_remove_col(testData, 70)
# dimensions of the cleaned data
rbind(training = dim(training),
testing = dim(testing))
set.seed(2023)
# split the data
inTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
train <- training[inTrain, ]
test <- training[-inTrain, ]
# Exploratory Data Analysis
corr_data <- select_if(train, is.numeric)
corrplot(
cor(corr_data),
method = "color",
tl.pos = "n",
insig = "blank"
)
# prediction
### Random forest Model
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv",
number = 7,
allowParallel = TRUE)
rf.fit <- train(
classe ~ .,
method = "rf",
data = train,
trControl = fitControl
)
set.seed(2023)
rf.fit <- train(
classe ~ .,
method = "rf",
data = train,
trControl = fitControl
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(caret)
library(randomForest)
if (!file.exists('train.csv')) {
download.file(url = 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv',
destfile = 'train.csv', method = 'curl', quiet = TRUE)
}
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
required_libraries <- c("data.table", "caret", "ggplot2", "parallel","doParallel",
"visdat", "purrr", "dplyr", "printr","corrplot",
"kableExtra", "gbm", "e1071", "randomForest","forecast")
library_check <- sapply(required_libraries, require, character.only = TRUE,
quietly = TRUE)
required_libraries <- c("data.table", "caret", "ggplot2", "parallel","doParallel",
"visdat", "purrr", "dplyr", "printr","corrplot",
"kableExtra", "gbm", "e1071", "randomForest","forecast")
library_check <- sapply(required_libraries, require, character.only = TRUE,
quietly = TRUE)
if (!file.exists("./data")) {
dir.create("./data")
}
setwd("./data")
path <- getwd()
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
setwd("./..")
trainData <- read.csv("./data/pml-training.csv")
download.file(trainURL, file.path(path, "pml-training.csv"))
download.file(testURL, file.path(path, "pml-testing.csv"))
setwd("./..")
trainData <- read.csv("./data/pml-training.csv")
testData <- read.csv("./data/pml-testing.csv")
head(trainData)
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
rbind(training = dim(trainData),
testing = dim(testData))
na_remove_col <- function(dataset, threshold) {
dataset %>%
discard(~ sum(is.na(.x)) / length(.x) * 100 > threshold)
}
training <- na_remove_col(trainData, 70)
testing <- na_remove_col(testData, 70)
rbind(training = dim(training),
testing = dim(testing))
# split the data
set.seed(2013)
inTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
train <- training[inTrain, ]
test <- training[-inTrain, ]
# Exploratory Data Analysis
corr_data <- select_if(train, is.numeric)
corrplot(
cor(corr_data),
method = "color",
tl.pos = "n",
insig = "blank"
)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv",
number = 7,
allowParallel = TRUE)
set.seed(2024)
rf.fit <- train(
classe ~ .,
method = "rf",
data = train,
trControl = fitControl
)
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
required_libraries <- c("data.table", "caret", "ggplot2", "parallel","doParallel",
"visdat", "purrr", "dplyr", "printr","corrplot",
"kableExtra", "gbm", "e1071", "randomForest","forecast")
library_check <- sapply(required_libraries, require, character.only = TRUE,
quietly = TRUE)
if (!file.exists("./data")) {
dir.create("./data")
}
setwd("./data")
path <- getwd()
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
setwd("./data")
download.file(trainURL, file.path(path, "pml-training.csv"))
download.file(testURL, file.path(path, "pml-testing.csv"))
setwd("./..")
trainData <- read.csv("./data/pml-training.csv")
testData <- read.csv("./data/pml-testing.csv")
str(trainData)
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
# dimensions of the data
rbind(training = dim(trainData),
testing = dim(testData))
set.seed(2023)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
set.seed(2023)
inTrain <- createDataPartition(y = trainData$classe, p = 0.7, list = F)
training <- trainData[inTrain, ]
testing <- trainData[-inTrain, ]
nzv <- nearZeroVar(train, saveMetrics = T)
nzv <- nearZeroVar(trainData, saveMetrics = T)
keepFeat <- row.names(nzv[nzv$nzv == FALSE, ])
training <- training[, keepFeat]
training <- training[, colSums(is.na(training)) == 0]
dim(training)
modCtl <- trainControl(method = 'cv', number = 7)
corr_data <- select_if(training, is.numeric)
corrplot(
cor(corr_data),
method = "color",
tl.pos = "n",
insig = "blank"
)
set.seed(2024)
modRf <- train(classe ~. , data = training, method = 'rf', trControl = modCtl)
modCtl <- trainControl(method = 'cv', number = 5)
set.seed(2024)
modRf <- train(classe ~. , data = training, method = 'rf', trControl = modCtl)
str(trainData)
# subset the datasets
trainData <- trainData[, -c(1:7)]
testData <- testData[, -c(1:7)]
# dimensions of the data
rbind(training = dim(trainData),
testing = dim(testData))
set.seed(2023)
inTrain <- createDataPartition(y = trainData$classe, p = 0.7, list = F)
training <- trainData[inTrain, ]
testing <- trainData[-inTrain, ]
nzv <- nearZeroVar(trainData, saveMetrics = T)
keepFeat <- row.names(nzv[nzv$nzv == FALSE, ])
training <- training[, keepFeat]
training <- training[, colSums(is.na(training)) == 0]
dim(training)
corr_data <- select_if(training, is.numeric)
corrplot(
cor(corr_data),
method = "color",
tl.pos = "n",
insig = "blank"
)
modCtl <- trainControl(method = 'cv', number = 5)
set.seed(2024)
modRf <- train(classe ~. , data = training, method = 'rf', trControl = modCtl)
modRf$finalModel
plot(model.rf$finalModel)
plot(modRf$finalModel)
predRf <- predict(modRf, newdata = testing)
confusionMatrix(predRf, testing$classe)$table
predRf <- predict(modRf, newdata = testing)
confusionMatrix(predRf, testing$classe)$table
predRf <- predict(modRf, newdata = testing)
confusionMatrix(predRf, testing$classe)$table
predRf <- factor(as.character(predRf), levels = levels(testing$classe))
confusionMatrix(predRf, testing$classe)$table
predRf <- predict(modRf, newdata = testing)
predRf
confusionMatrix(predRf, testData)
confusionMatrix(predRf, testData)$classe
confusionMatrix(predRf, testing$class)
predRf <- predict(modRf, newdata = testing)
confusionMatrix(predRf, testing$classe)
confusionMatrix(predRf, testing$classe)$table
predRf <- predict(modRf, newdata = testing)
confusionMatrix(predRf, testData$classe)$table
levels(testing$classe)
predRf <- predict(modRf, newdata = testing)
predRf <- factor(predRf, levels = levels(testing$classe))
confusionMatrix(predRf, testing$classe)$table
predRf <- factor(as.character(predRf), levels = levels(testing$classe))
confusionMatrix(predRf, testing$classe)$table
predRf <- predict(modRf, newdata = testing)
table(predRf)
importance <- varImp(modRf, scale = FALSE)
plot(importance, top=10)
pred.rf <- predict(modRf, testing)
confM <- confusionMatrix(testing$classe, pred.rf)
levels(pred.rf)
levels(testing$classe)
View(testing)
View(testData)
View(testing)
predRf <- factor(testing$classe, levels = levels(pred.rf))
levels(testing$classe)
as.factor(testing$classe)
levels(testing$classe)
testing$classe <- factor(testing$classe, levels = c("A", "B", "C", "D", "E"))
levels(testing$classe)
pred.rf <- predict(modRf, testing)
confusionMatrix(pred.rf, testing$classe)$table
pred.rf <- predict(modRf, testing)
confusionMatrix(pred.rf, testing$classe)$table
confusionMatrix(predRf, testing$classe)$overall[1]
confusionMatrix(pred.rf, testing$classe)$overall[1]
modGbm <- train(classe ~., data = training, method = 'gbm', trControl = modCtl, verbose = F)
modGbm$finalModel
predGbm <- predict(modGbm, newdata = testing)
confusionMatrix(predGbm, testing$classe)$table
confusionMatrix(predGbm, testing$classe)$overall[1]
predRfTest <- predict(modRf, newdata = testData)
predRfTest
predGbmTest <- predict(modGbm, newdata = testRaw)
predGbmTest <- predict(modGbm, newdata = testData)
predGbmTest
table(predRfTest, predGbmTest)
modGbm  <- readRDS(file = "modGbm .rds")
modGbm
modGbm$finalModel
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
required_libraries <- c("data.table", "caret", "ggplot2", "parallel","doParallel",
"visdat", "purrr", "dplyr", "printr","corrplot",
"kableExtra", "gbm", "e1071", "randomForest","forecast")
library_check <- sapply(required_libraries, require, character.only = TRUE,
quietly = TRUE)
```{r Directory creation, echo=TRUE, message=TRUE, warning=TRUE, paged.print=TRUE}
library(data.table)
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
library(visdat)
library(purrr)
library(dplyr)
library(printr)
library(corrplot)
library(kableExtra)
library(gbm)
library(e1071)
library(randomForest)
library(forecast)
